
Anzu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00802800  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  0080280e  0080280e  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b04  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c8c  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ace  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00009cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013be5  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d71  00000000  00000000  0001dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0001e942  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000d54  00000000  00000000  0001ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_12>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_13>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_17>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  7c:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_31>
  80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  a0:	bf 01       	movw	r22, r30
  a2:	c5 01       	movw	r24, r10
  a4:	cb 01       	movw	r24, r22
  a6:	d1 01       	movw	r26, r2
  a8:	d7 01       	movw	r26, r14
  aa:	dd 01       	movw	r26, r26
  ac:	e3 01       	movw	r28, r6

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	df e3       	ldi	r29, 0x3F	; 63
  b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_copy_data>:
  ba:	18 e2       	ldi	r17, 0x28	; 40
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b8 e2       	ldi	r27, 0x28	; 40
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f7 e0       	ldi	r31, 0x07	; 7
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
  c6:	05 90       	lpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	ae 30       	cpi	r26, 0x0E	; 14
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
  d0:	2a e2       	ldi	r18, 0x2A	; 42
  d2:	ae e0       	ldi	r26, 0x0E	; 14
  d4:	b8 e2       	ldi	r27, 0x28	; 40
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ac 33       	cpi	r26, 0x3C	; 60
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  e4:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <__vector_13>:

void (*IR_Keyboard_Controller_Callback_Note_Off)(uint8_t) = NULL;


/*キーボード入力割り込み*/
ISR(TCB1_INT_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	
	for(uint8_t idx = 0;idx < 24;idx++){
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	57 c0       	rjmp	.+174    	; 0x1ca <__EEPROM_REGION_LENGTH__+0xca>
		uint8_t cur = IR_Sensor_Driver_Get_Value(idx * 2) & IR_Sensor_Driver_Get_Value(idx * 2 + 1);
 11c:	c1 2f       	mov	r28, r17
 11e:	cc 0f       	add	r28, r28
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 30 01 	call	0x260	; 0x260 <IR_Sensor_Driver_Get_Value>
 126:	08 2f       	mov	r16, r24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	8c 0f       	add	r24, r28
 12c:	0e 94 30 01 	call	0x260	; 0x260 <IR_Sensor_Driver_Get_Value>
 130:	08 23       	and	r16, r24
		uint8_t prv = (prev[idx / 8] & (1 << (idx % 8)))? 1 : 0;
 132:	c1 2f       	mov	r28, r17
 134:	c6 95       	lsr	r28
 136:	c6 95       	lsr	r28
 138:	c6 95       	lsr	r28
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	fe 01       	movw	r30, r28
 13e:	ee 5e       	subi	r30, 0xEE	; 238
 140:	f7 4d       	sbci	r31, 0xD7	; 215
 142:	20 81       	ld	r18, Z
 144:	81 2f       	mov	r24, r17
 146:	87 70       	andi	r24, 0x07	; 7
 148:	f8 2e       	mov	r15, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
 14e:	35 95       	asr	r19
 150:	27 95       	ror	r18
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <__EEPROM_REGION_LENGTH__+0x4e>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	a9 01       	movw	r20, r18
 15a:	41 70       	andi	r20, 0x01	; 1
 15c:	55 27       	eor	r21, r21
 15e:	20 ff       	sbrs	r18, 0
 160:	80 e0       	ldi	r24, 0x00	; 0
		if(prv){
 162:	45 2b       	or	r20, r21
 164:	59 f0       	breq	.+22     	; 0x17c <__EEPROM_REGION_LENGTH__+0x7c>
			/*前回スキャン時にON*/
			if(prv != cur){
 166:	08 17       	cp	r16, r24
 168:	99 f0       	breq	.+38     	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
				/*ノートオフ*/
				if(IR_Keyboard_Controller_Callback_Note_Off != NULL)IR_Keyboard_Controller_Callback_Note_Off(idx);
 16a:	e0 91 0e 28 	lds	r30, 0x280E	; 0x80280e <__data_end>
 16e:	f0 91 0f 28 	lds	r31, 0x280F	; 0x80280f <__data_end+0x1>
 172:	30 97       	sbiw	r30, 0x00	; 0
 174:	69 f0       	breq	.+26     	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
 176:	81 2f       	mov	r24, r17
 178:	09 95       	icall
 17a:	0a c0       	rjmp	.+20     	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
			}
		} else {
			/*前回スキャン時にOFF*/
			if(prv != cur){
 17c:	08 17       	cp	r16, r24
 17e:	41 f0       	breq	.+16     	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
				/*ノートオン*/
				if(IR_Keyboard_Controller_Callback_Note_On != NULL)IR_Keyboard_Controller_Callback_Note_On(idx);
 180:	e0 91 10 28 	lds	r30, 0x2810	; 0x802810 <IR_Keyboard_Controller_Callback_Note_On>
 184:	f0 91 11 28 	lds	r31, 0x2811	; 0x802811 <IR_Keyboard_Controller_Callback_Note_On+0x1>
 188:	30 97       	sbiw	r30, 0x00	; 0
 18a:	11 f0       	breq	.+4      	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
 18c:	81 2f       	mov	r24, r17
 18e:	09 95       	icall
			}
		}
		
		
		if(cur){
 190:	00 23       	and	r16, r16
 192:	69 f0       	breq	.+26     	; 0x1ae <__EEPROM_REGION_LENGTH__+0xae>
			prev[idx / 8] |= (1 << (idx % 8));
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	fa 94       	dec	r15
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <__EEPROM_REGION_LENGTH__+0x9a>
 1a2:	ce 5e       	subi	r28, 0xEE	; 238
 1a4:	d7 4d       	sbci	r29, 0xD7	; 215
 1a6:	98 81       	ld	r25, Y
 1a8:	89 2b       	or	r24, r25
 1aa:	88 83       	st	Y, r24
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__EEPROM_REGION_LENGTH__+0xc8>
		} else {
			prev[idx / 8] &= ~(1 << (idx % 8));
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__EEPROM_REGION_LENGTH__+0xb8>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	fa 94       	dec	r15
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <__EEPROM_REGION_LENGTH__+0xb4>
 1bc:	ce 5e       	subi	r28, 0xEE	; 238
 1be:	d7 4d       	sbci	r29, 0xD7	; 215
 1c0:	80 95       	com	r24
 1c2:	98 81       	ld	r25, Y
 1c4:	89 23       	and	r24, r25
 1c6:	88 83       	st	Y, r24


/*キーボード入力割り込み*/
ISR(TCB1_INT_vect){
	
	for(uint8_t idx = 0;idx < 24;idx++){
 1c8:	1f 5f       	subi	r17, 0xFF	; 255
 1ca:	18 31       	cpi	r17, 0x18	; 24
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <__EEPROM_REGION_LENGTH__+0xd0>
 1ce:	a6 cf       	rjmp	.-180    	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
		} else {
			prev[idx / 8] &= ~(1 << (idx % 8));
		}
	}
	
	TCB1.INTFLAGS = TCB_CAPT_bm;	/*割り込みフラグをクリア*/
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <__TEXT_REGION_LENGTH__+0x7f4a96>
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <IR_Keyboard_Controller_Init>:

/*コントローラの初期化*/
void IR_Keyboard_Controller_Init(void){
	IR_Sensor_Driver_Init();
 202:	0e 94 13 01 	call	0x226	; 0x226 <IR_Sensor_Driver_Init>

	/*TCB1初期設定*/
	TCB1.CCMP = keyFreq;			/*割り込み周期設定*/
 206:	e0 e9       	ldi	r30, 0x90	; 144
 208:	fa e0       	ldi	r31, 0x0A	; 10
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	95 e7       	ldi	r25, 0x75	; 117
 20e:	84 87       	std	Z+12, r24	; 0x0c
 210:	95 87       	std	Z+13, r25	; 0x0d
	TCB1.CTRLA |= (0x01 << 1) | TCB_ENABLE_bm;	/*TCB1有効化*/
 212:	80 81       	ld	r24, Z
 214:	83 60       	ori	r24, 0x03	; 3
 216:	80 83       	st	Z, r24
 218:	08 95       	ret

0000021a <IR_Keyboard_Controller_Begin>:
}

/*動作を開始*/
void IR_Keyboard_Controller_Begin(void){
	IR_Sensor_Driver_Begin();
 21a:	0e 94 2a 01 	call	0x254	; 0x254 <IR_Sensor_Driver_Begin>
	TCB1.INTCTRL = TCB_CAPT_bm;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <__TEXT_REGION_LENGTH__+0x7f4a95>
 224:	08 95       	ret

00000226 <IR_Sensor_Driver_Init>:
	return;
}

/*動作を停止*/
void IR_Sensor_Driver_Stop(void){
	AC0.CTRLA &= ~(AC_ENABLE_bm);	/*AC0有効化*/
 226:	e0 e4       	ldi	r30, 0x40	; 64
 228:	f4 e0       	ldi	r31, 0x04	; 4
 22a:	9f e3       	ldi	r25, 0x3F	; 63
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
 234:	a0 e8       	ldi	r26, 0x80	; 128
 236:	b4 e0       	ldi	r27, 0x04	; 4
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	11 96       	adiw	r26, 0x01	; 1
 23c:	8c 93       	st	X, r24
 23e:	11 97       	sbiw	r26, 0x01	; 1
 240:	96 83       	std	Z+6, r25	; 0x06
 242:	15 82       	std	Z+5, r1	; 0x05
 244:	16 96       	adiw	r26, 0x06	; 6
 246:	8c 93       	st	X, r24
 248:	e0 e8       	ldi	r30, 0x80	; 128
 24a:	f6 e0       	ldi	r31, 0x06	; 6
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	8b 69       	ori	r24, 0x9B	; 155
 250:	82 83       	std	Z+2, r24	; 0x02
 252:	08 95       	ret

00000254 <IR_Sensor_Driver_Begin>:
 254:	e0 e8       	ldi	r30, 0x80	; 128
 256:	f6 e0       	ldi	r31, 0x06	; 6
 258:	80 81       	ld	r24, Z
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <IR_Sensor_Driver_Get_Value>:
	return;
}

/*センサーの値を取得*/
uint8_t IR_Sensor_Driver_Get_Value(uint8_t idx){
	PORTC.OUT = idx & 0x3F;
 260:	8f 73       	andi	r24, 0x3F	; 63
 262:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <__TEXT_REGION_LENGTH__+0x7f4444>
	PORTE.OUTSET = 0x08;	/*チップセレクトロジックを有効化*/	
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7f4485>
	if(AC0.STATUS & AC_STATE_bm){
 26c:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <__TEXT_REGION_LENGTH__+0x7f4687>
 270:	89 2f       	mov	r24, r25
 272:	80 71       	andi	r24, 0x10	; 16
 274:	94 fd       	sbrc	r25, 4
		/*入力あり*/
		return 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		/*入力なし*/
		return 0;
	}
	PORTE.OUTCLR = 0x08;	/*チップセレクトロジックを無効化*/
 278:	08 95       	ret

0000027a <RGB_LED_Driver_SetColour>:
}

/*動作を停止*/
void RGB_LED_Driver_Stop(void){
	/*TCB0の割り込みを無効化*/
	TCB0.INTCTRL &= ~(TCB_CAPT_bm);
 27a:	98 2f       	mov	r25, r24
 27c:	96 95       	lsr	r25
 27e:	96 95       	lsr	r25
 280:	96 95       	lsr	r25
 282:	39 2f       	mov	r19, r25
 284:	33 0f       	add	r19, r19
 286:	33 0f       	add	r19, r19
 288:	33 0f       	add	r19, r19
 28a:	38 1b       	sub	r19, r24
 28c:	39 5f       	subi	r19, 0xF9	; 249
 28e:	66 23       	and	r22, r22
 290:	81 f0       	breq	.+32     	; 0x2b2 <RGB_LED_Driver_SetColour+0x38>
 292:	89 2f       	mov	r24, r25
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	ea 5d       	subi	r30, 0xDA	; 218
 29a:	f7 4d       	sbci	r31, 0xD7	; 215
 29c:	50 81       	ld	r21, Z
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	03 2e       	mov	r0, r19
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <RGB_LED_Driver_SetColour+0x30>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <RGB_LED_Driver_SetColour+0x2c>
 2ae:	65 2b       	or	r22, r21
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <RGB_LED_Driver_SetColour+0x58>
 2b2:	89 2f       	mov	r24, r25
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	ea 5d       	subi	r30, 0xDA	; 218
 2ba:	f7 4d       	sbci	r31, 0xD7	; 215
 2bc:	50 81       	ld	r21, Z
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	03 2e       	mov	r0, r19
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <RGB_LED_Driver_SetColour+0x50>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <RGB_LED_Driver_SetColour+0x4c>
 2ce:	60 95       	com	r22
 2d0:	65 23       	and	r22, r21
 2d2:	fc 01       	movw	r30, r24
 2d4:	ea 5d       	subi	r30, 0xDA	; 218
 2d6:	f7 4d       	sbci	r31, 0xD7	; 215
 2d8:	60 83       	st	Z, r22
 2da:	44 23       	and	r20, r20
 2dc:	71 f0       	breq	.+28     	; 0x2fa <RGB_LED_Driver_SetColour+0x80>
 2de:	fc 01       	movw	r30, r24
 2e0:	e2 5e       	subi	r30, 0xE2	; 226
 2e2:	f7 4d       	sbci	r31, 0xD7	; 215
 2e4:	60 81       	ld	r22, Z
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	03 2e       	mov	r0, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <RGB_LED_Driver_SetColour+0x78>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <RGB_LED_Driver_SetColour+0x74>
 2f6:	46 2b       	or	r20, r22
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <RGB_LED_Driver_SetColour+0x9e>
 2fa:	fc 01       	movw	r30, r24
 2fc:	e2 5e       	subi	r30, 0xE2	; 226
 2fe:	f7 4d       	sbci	r31, 0xD7	; 215
 300:	50 81       	ld	r21, Z
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	03 2e       	mov	r0, r19
 308:	02 c0       	rjmp	.+4      	; 0x30e <RGB_LED_Driver_SetColour+0x94>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <RGB_LED_Driver_SetColour+0x90>
 312:	46 2f       	mov	r20, r22
 314:	40 95       	com	r20
 316:	45 23       	and	r20, r21
 318:	fc 01       	movw	r30, r24
 31a:	e2 5e       	subi	r30, 0xE2	; 226
 31c:	f7 4d       	sbci	r31, 0xD7	; 215
 31e:	40 83       	st	Z, r20
 320:	22 23       	and	r18, r18
 322:	79 f0       	breq	.+30     	; 0x342 <RGB_LED_Driver_SetColour+0xc8>
 324:	fc 01       	movw	r30, r24
 326:	ea 5e       	subi	r30, 0xEA	; 234
 328:	f7 4d       	sbci	r31, 0xD7	; 215
 32a:	60 81       	ld	r22, Z
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	fa 01       	movw	r30, r20
 332:	02 c0       	rjmp	.+4      	; 0x338 <RGB_LED_Driver_SetColour+0xbe>
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	3a 95       	dec	r19
 33a:	e2 f7       	brpl	.-8      	; 0x334 <RGB_LED_Driver_SetColour+0xba>
 33c:	9f 01       	movw	r18, r30
 33e:	26 2b       	or	r18, r22
 340:	0f c0       	rjmp	.+30     	; 0x360 <RGB_LED_Driver_SetColour+0xe6>
 342:	fc 01       	movw	r30, r24
 344:	ea 5e       	subi	r30, 0xEA	; 234
 346:	f7 4d       	sbci	r31, 0xD7	; 215
 348:	40 81       	ld	r20, Z
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	fb 01       	movw	r30, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <RGB_LED_Driver_SetColour+0xdc>
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	3a 95       	dec	r19
 358:	e2 f7       	brpl	.-8      	; 0x352 <RGB_LED_Driver_SetColour+0xd8>
 35a:	9f 01       	movw	r18, r30
 35c:	20 95       	com	r18
 35e:	24 23       	and	r18, r20
 360:	fc 01       	movw	r30, r24
 362:	ea 5e       	subi	r30, 0xEA	; 234
 364:	f7 4d       	sbci	r31, 0xD7	; 215
 366:	20 83       	st	Z, r18
 368:	08 95       	ret

0000036a <RGB_LED_Driver_SetColour_FromEnum>:
 36a:	46 2f       	mov	r20, r22
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	47 30       	cpi	r20, 0x07	; 7
 370:	51 05       	cpc	r21, r1
 372:	78 f5       	brcc	.+94     	; 0x3d2 <RGB_LED_Driver_SetColour_FromEnum+0x68>
 374:	fa 01       	movw	r30, r20
 376:	e0 5b       	subi	r30, 0xB0	; 176
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__tablejump2__>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 388:	08 95       	ret
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 394:	08 95       	ret
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3a0:	08 95       	ret
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3ac:	08 95       	ret
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3b8:	08 95       	ret
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3c4:	08 95       	ret
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3d0:	08 95       	ret
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 3d 01 	call	0x27a	; 0x27a <RGB_LED_Driver_SetColour>
 3dc:	08 95       	ret

000003de <__vector_12>:
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	f8 94       	cli
 3f8:	40 91 15 28 	lds	r20, 0x2815	; 0x802815 <ledCntr>
 3fc:	44 23       	and	r20, r20
 3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	39 f0       	breq	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	26 e2       	ldi	r18, 0x26	; 38
 408:	38 e2       	ldi	r19, 0x28	; 40
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	26 e1       	ldi	r18, 0x16	; 22
 40e:	38 e2       	ldi	r19, 0x28	; 40
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	2e e1       	ldi	r18, 0x1E	; 30
 414:	38 e2       	ldi	r19, 0x28	; 40
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
 41e:	85 ff       	sbrs	r24, 5
 420:	fc cf       	rjmp	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	f9 01       	movw	r30, r18
 424:	e9 0f       	add	r30, r25
 426:	f1 1d       	adc	r31, r1
 428:	80 81       	ld	r24, Z
 42a:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
 42e:	9f 5f       	subi	r25, 0xFF	; 255
 430:	98 30       	cpi	r25, 0x08	; 8
 432:	98 f3       	brcs	.-26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 434:	87 e0       	ldi	r24, 0x07	; 7
 436:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7f4486>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	00 00       	nop
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	80 32       	cpi	r24, 0x20	; 32
 444:	e0 f3       	brcs	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f4 e0       	ldi	r31, 0x04	; 4
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	86 83       	std	Z+6, r24	; 0x06
 44e:	85 83       	std	Z+5, r24	; 0x05
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	00 00       	nop
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	80 32       	cpi	r24, 0x20	; 32
 45a:	e0 f3       	brcs	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	04 2e       	mov	r0, r20
 462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7f4485>
 470:	42 30       	cpi	r20, 0x02	; 2
 472:	10 f4       	brcc	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	01 c0       	rjmp	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	40 93 15 28 	sts	0x2815, r20	; 0x802815 <ledCntr>
 47e:	e0 e8       	ldi	r30, 0x80	; 128
 480:	fa e0       	ldi	r31, 0x0A	; 10
 482:	86 81       	ldd	r24, Z+6	; 0x06
 484:	81 60       	ori	r24, 0x01	; 1
 486:	86 83       	std	Z+6, r24	; 0x06
 488:	78 94       	sei
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <RGB_LED_Driver_Init>:
 4a2:	80 ed       	ldi	r24, 0xD0	; 208
 4a4:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
 4a8:	e0 e8       	ldi	r30, 0x80	; 128
 4aa:	f4 e0       	ldi	r31, 0x04	; 4
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	81 83       	std	Z+1, r24	; 0x01
 4b0:	86 83       	std	Z+6, r24	; 0x06
 4b2:	e0 ec       	ldi	r30, 0xC0	; 192
 4b4:	f8 e0       	ldi	r31, 0x08	; 8
 4b6:	80 81       	ld	r24, Z
 4b8:	80 63       	ori	r24, 0x30	; 48
 4ba:	80 83       	st	Z, r24
 4bc:	81 81       	ldd	r24, Z+1	; 0x01
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	81 83       	std	Z+1, r24	; 0x01
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
 4c8:	85 e0       	ldi	r24, 0x05	; 5
 4ca:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
 4ce:	e0 e8       	ldi	r30, 0x80	; 128
 4d0:	fa e0       	ldi	r31, 0x0A	; 10
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	9e e4       	ldi	r25, 0x4E	; 78
 4d6:	84 87       	std	Z+12, r24	; 0x0c
 4d8:	95 87       	std	Z+13, r25	; 0x0d
 4da:	80 81       	ld	r24, Z
 4dc:	85 60       	ori	r24, 0x05	; 5
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <RGB_LED_Driver_Begin>:
 4e2:	e0 e8       	ldi	r30, 0x80	; 128
 4e4:	fa e0       	ldi	r31, 0x0A	; 10
 4e6:	85 81       	ldd	r24, Z+5	; 0x05
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	85 83       	std	Z+5, r24	; 0x05
 4ec:	08 95       	ret

000004ee <RGB_LED_Driver_Set_Key>:
	}
}

/*表示色を変更*/
void RGB_LED_Driver_Set_Key(uint8_t idx,enum Col_e colour){
	if(idx > 23)return;/*範囲外*/
 4ee:	88 31       	cpi	r24, 0x18	; 24
 4f0:	20 f4       	brcc	.+8      	; 0x4fa <RGB_LED_Driver_Set_Key+0xc>
	
	uint8_t pos = 17 + (idx << 1);	/*位置*/
 4f2:	88 0f       	add	r24, r24
	
	RGB_LED_Driver_SetColour_FromEnum(pos,colour);
 4f4:	8f 5e       	subi	r24, 0xEF	; 239
 4f6:	0e 94 b5 01 	call	0x36a	; 0x36a <RGB_LED_Driver_SetColour_FromEnum>
 4fa:	08 95       	ret

000004fc <RGB_LED_Driver_Set_Separater>:
}

void RGB_LED_Driver_Set_Separater(uint8_t idx,enum Col_e colour){
	if(idx > 22)return;/*範囲外*/
 4fc:	87 31       	cpi	r24, 0x17	; 23
 4fe:	20 f4       	brcc	.+8      	; 0x508 <RGB_LED_Driver_Set_Separater+0xc>
	
	uint8_t pos = 18 + (idx << 1);	/*位置*/
 500:	88 0f       	add	r24, r24

	RGB_LED_Driver_SetColour_FromEnum(pos,colour);
 502:	8e 5e       	subi	r24, 0xEE	; 238
 504:	0e 94 b5 01 	call	0x36a	; 0x36a <RGB_LED_Driver_SetColour_FromEnum>
 508:	08 95       	ret

0000050a <RGB_LED_Driver_Set_PBC>:
}

void RGB_LED_Driver_Set_PBC(uint8_t idx,enum Col_e colour){
	if(idx > 15)return;/*範囲外*/
 50a:	80 31       	cpi	r24, 0x10	; 16
 50c:	10 f4       	brcc	.+4      	; 0x512 <RGB_LED_Driver_Set_PBC+0x8>
	
	uint8_t pos = idx;	/*位置*/	
	
	RGB_LED_Driver_SetColour_FromEnum(pos,colour);
 50e:	0e 94 b5 01 	call	0x36a	; 0x36a <RGB_LED_Driver_SetColour_FromEnum>
 512:	08 95       	ret

00000514 <testOn>:
#include "Lighting/RGB_LED_Driver.h"
#include "IR_Sensor/IR_Keyboard_Controller.h"
#include "MCU_Init/MCU_Init.h"
#include "USART/USART_Driver.h"

void testOn(uint8_t note){
 514:	08 95       	ret

00000516 <testOff>:
	return;
}

void testOff(uint8_t note){
 516:	08 95       	ret

00000518 <main>:
}

int main(void)
{	
	/*初期化セクション*/
	MCU_Init();
 518:	0e 94 df 02 	call	0x5be	; 0x5be <MCU_Init>
	USART_Driver_Init();
 51c:	0e 94 5f 03 	call	0x6be	; 0x6be <USART_Driver_Init>
	RGB_LED_Driver_Init();
 520:	0e 94 51 02 	call	0x4a2	; 0x4a2 <RGB_LED_Driver_Init>
	IR_Keyboard_Controller_Init();
 524:	0e 94 01 01 	call	0x202	; 0x202 <IR_Keyboard_Controller_Init>
	
	sei();	/*全体割り込み許可*/
 528:	78 94       	sei
	
	/*コールバック関数の設定*/
	IR_Keyboard_Controller_Callback_Note_On = *testOn;
 52a:	8a e8       	ldi	r24, 0x8A	; 138
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	80 93 10 28 	sts	0x2810, r24	; 0x802810 <IR_Keyboard_Controller_Callback_Note_On>
 532:	90 93 11 28 	sts	0x2811, r25	; 0x802811 <IR_Keyboard_Controller_Callback_Note_On+0x1>
	IR_Keyboard_Controller_Callback_Note_Off= *testOff;
 536:	8b e8       	ldi	r24, 0x8B	; 139
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <__data_end>
 53e:	90 93 0f 28 	sts	0x280F, r25	; 0x80280f <__data_end+0x1>
	
	/*動作開始セクション*/
	USART_Driver_Begin(USART_DEBUG);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 a1 03 	call	0x742	; 0x742 <USART_Driver_Begin>
	RGB_LED_Driver_Begin();
 548:	0e 94 71 02 	call	0x4e2	; 0x4e2 <RGB_LED_Driver_Begin>
	IR_Keyboard_Controller_Begin();
 54c:	0e 94 0d 01 	call	0x21a	; 0x21a <IR_Keyboard_Controller_Begin>

	for(uint8_t i = 0;i < 23;i++){
 550:	c0 e0       	ldi	r28, 0x00	; 0
 552:	05 c0       	rjmp	.+10     	; 0x55e <main+0x46>
		RGB_LED_Driver_Set_Separater(i,COLOUR_RED);
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	8c 2f       	mov	r24, r28
 558:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RGB_LED_Driver_Set_Separater>
	/*動作開始セクション*/
	USART_Driver_Begin(USART_DEBUG);
	RGB_LED_Driver_Begin();
	IR_Keyboard_Controller_Begin();

	for(uint8_t i = 0;i < 23;i++){
 55c:	cf 5f       	subi	r28, 0xFF	; 255
 55e:	c7 31       	cpi	r28, 0x17	; 23
 560:	c8 f3       	brcs	.-14     	; 0x554 <main+0x3c>
 562:	c0 e0       	ldi	r28, 0x00	; 0
 564:	05 c0       	rjmp	.+10     	; 0x570 <main+0x58>
		RGB_LED_Driver_Set_Separater(i,COLOUR_RED);
	}
	
	for(uint8_t i = 0;i < 23;i++){
		RGB_LED_Driver_Set_PBC(i,COLOUR_RED);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	8c 2f       	mov	r24, r28
 56a:	0e 94 85 02 	call	0x50a	; 0x50a <RGB_LED_Driver_Set_PBC>

	for(uint8_t i = 0;i < 23;i++){
		RGB_LED_Driver_Set_Separater(i,COLOUR_RED);
	}
	
	for(uint8_t i = 0;i < 23;i++){
 56e:	cf 5f       	subi	r28, 0xFF	; 255
 570:	c7 31       	cpi	r28, 0x17	; 23
 572:	c8 f3       	brcs	.-14     	; 0x566 <main+0x4e>
		RGB_LED_Driver_Set_PBC(i,COLOUR_RED);
	}
	
			
	while(1){
		for(uint8_t i = 0;i < 24;i++){
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	0e c0       	rjmp	.+28     	; 0x594 <main+0x7c>
			RGB_LED_Driver_Set_Key(i,COLOUR_GREEN);
 578:	63 e0       	ldi	r22, 0x03	; 3
 57a:	8c 2f       	mov	r24, r28
 57c:	0e 94 77 02 	call	0x4ee	; 0x4ee <RGB_LED_Driver_Set_Key>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 580:	2f e3       	ldi	r18, 0x3F	; 63
 582:	8d e0       	ldi	r24, 0x0D	; 13
 584:	93 e0       	ldi	r25, 0x03	; 3
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x6e>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x78>
 590:	00 00       	nop
		RGB_LED_Driver_Set_PBC(i,COLOUR_RED);
	}
	
			
	while(1){
		for(uint8_t i = 0;i < 24;i++){
 592:	cf 5f       	subi	r28, 0xFF	; 255
 594:	c8 31       	cpi	r28, 0x18	; 24
 596:	80 f3       	brcs	.-32     	; 0x578 <main+0x60>
 598:	c0 e0       	ldi	r28, 0x00	; 0
 59a:	0e c0       	rjmp	.+28     	; 0x5b8 <main+0xa0>
			RGB_LED_Driver_Set_Key(i,COLOUR_GREEN);
			_delay_ms(50);
		}
		
		for(uint8_t i = 0;i < 24;i++){
			RGB_LED_Driver_Set_Key(i,COLOUR_BLACK);
 59c:	67 e0       	ldi	r22, 0x07	; 7
 59e:	8c 2f       	mov	r24, r28
 5a0:	0e 94 77 02 	call	0x4ee	; 0x4ee <RGB_LED_Driver_Set_Key>
 5a4:	2f e3       	ldi	r18, 0x3F	; 63
 5a6:	8d e0       	ldi	r24, 0x0D	; 13
 5a8:	93 e0       	ldi	r25, 0x03	; 3
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x92>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x9c>
 5b4:	00 00       	nop
		for(uint8_t i = 0;i < 24;i++){
			RGB_LED_Driver_Set_Key(i,COLOUR_GREEN);
			_delay_ms(50);
		}
		
		for(uint8_t i = 0;i < 24;i++){
 5b6:	cf 5f       	subi	r28, 0xFF	; 255
 5b8:	c8 31       	cpi	r28, 0x18	; 24
 5ba:	80 f3       	brcs	.-32     	; 0x59c <main+0x84>
 5bc:	db cf       	rjmp	.-74     	; 0x574 <main+0x5c>

000005be <MCU_Init>:

#include "MCU_Init.h"

void MCU_Init(void){
	/*CPUクロックを20MHzに設定*/
	CCP = CCP_IOREG_gc;	/*保護レジスタへの書き込み*/
 5be:	88 ed       	ldi	r24, 0xD8	; 216
 5c0:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0x00;	/*分周を無効化*/
 5c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	
	/*ラウンドロビン割り込みを有効化*/
	CCP = CCP_IOREG_gc;	/*保護レジスタへの書き込み*/
 5c6:	84 bf       	out	0x34, r24	; 52
	CPUINT.CTRLA |= CPUINT_LVL0RR_bm;	/*ラウンドロビン割り込み*/
 5c8:	e0 e1       	ldi	r30, 0x10	; 16
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	80 81       	ld	r24, Z
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	80 83       	st	Z, r24
		
	/*全体割り込みを許可*/
	sei();
 5d2:	78 94       	sei
 5d4:	08 95       	ret

000005d6 <__vector_17>:
		case USART_DEBUG:
		default:
		USART0.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);	/*送受信を不許可*/
		/*割り込み設定*/
		#if USART_USE_INT
		USART2.CTRLA &= ~USART_RXCIE_bm;	/*受信割り込み不許可*/
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
 5f2:	ed e2       	ldi	r30, 0x2D	; 45
 5f4:	f9 e2       	ldi	r31, 0x29	; 41
 5f6:	a0 81       	ld	r26, Z
 5f8:	b1 81       	ldd	r27, Z+1	; 0x01
 5fa:	8c 93       	st	X, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	80 83       	st	Z, r24
 604:	91 83       	std	Z+1, r25	; 0x01
 606:	8e 17       	cp	r24, r30
 608:	9f 07       	cpc	r25, r31
 60a:	31 f4       	brne	.+12     	; 0x618 <__vector_17+0x42>
 60c:	8e e2       	ldi	r24, 0x2E	; 46
 60e:	98 e2       	ldi	r25, 0x28	; 40
 610:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <RingBuffer_DEBUG+0xff>
 614:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <RingBuffer_DEBUG+0x100>
 618:	9f b7       	in	r25, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	06 c0       	rjmp	.+12     	; 0x62c <__vector_17+0x56>
 620:	e1 e3       	ldi	r30, 0x31	; 49
 622:	f9 e2       	ldi	r31, 0x29	; 41
 624:	80 81       	ld	r24, Z
 626:	8f 5f       	subi	r24, 0xFF	; 255
 628:	80 83       	st	Z, r24
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	81 11       	cpse	r24, r1
 62e:	f8 cf       	rjmp	.-16     	; 0x620 <__vector_17+0x4a>
 630:	9f bf       	out	0x3f, r25	; 63
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <__vector_31>:
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
 662:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f4840>
 666:	e1 e3       	ldi	r30, 0x31	; 49
 668:	fa e2       	ldi	r31, 0x2A	; 42
 66a:	a0 81       	ld	r26, Z
 66c:	b1 81       	ldd	r27, Z+1	; 0x01
 66e:	8c 93       	st	X, r24
 670:	80 81       	ld	r24, Z
 672:	91 81       	ldd	r25, Z+1	; 0x01
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	80 83       	st	Z, r24
 678:	91 83       	std	Z+1, r25	; 0x01
 67a:	8e 17       	cp	r24, r30
 67c:	9f 07       	cpc	r25, r31
 67e:	31 f4       	brne	.+12     	; 0x68c <__vector_31+0x42>
 680:	82 e3       	ldi	r24, 0x32	; 50
 682:	99 e2       	ldi	r25, 0x29	; 41
 684:	80 93 31 2a 	sts	0x2A31, r24	; 0x802a31 <RingBuffer_MIDI+0xff>
 688:	90 93 32 2a 	sts	0x2A32, r25	; 0x802a32 <RingBuffer_MIDI+0x100>
 68c:	9f b7       	in	r25, 0x3f	; 63
 68e:	f8 94       	cli
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <__vector_31+0x56>
 694:	e5 e3       	ldi	r30, 0x35	; 53
 696:	fa e2       	ldi	r31, 0x2A	; 42
 698:	80 81       	ld	r24, Z
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 83       	st	Z, r24
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	81 11       	cpse	r24, r1
 6a2:	f8 cf       	rjmp	.-16     	; 0x694 <__vector_31+0x4a>
 6a4:	9f bf       	out	0x3f, r25	; 63
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <USART_Driver_Init>:
 6be:	e0 ea       	ldi	r30, 0xA0	; 160
 6c0:	f4 e0       	ldi	r31, 0x04	; 4
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	82 83       	std	Z+2, r24	; 0x02
 6ca:	e0 e0       	ldi	r30, 0x00	; 0
 6cc:	f4 e0       	ldi	r31, 0x04	; 4
 6ce:	91 83       	std	Z+1, r25	; 0x01
 6d0:	82 83       	std	Z+2, r24	; 0x02
 6d2:	e0 e4       	ldi	r30, 0x40	; 64
 6d4:	f8 e0       	ldi	r31, 0x08	; 8
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	9a e0       	ldi	r25, 0x0A	; 10
 6da:	80 87       	std	Z+8, r24	; 0x08
 6dc:	91 87       	std	Z+9, r25	; 0x09
 6de:	83 e0       	ldi	r24, 0x03	; 3
 6e0:	87 83       	std	Z+7, r24	; 0x07
 6e2:	e0 e0       	ldi	r30, 0x00	; 0
 6e4:	f8 e0       	ldi	r31, 0x08	; 8
 6e6:	23 e2       	ldi	r18, 0x23	; 35
 6e8:	38 e0       	ldi	r19, 0x08	; 8
 6ea:	20 87       	std	Z+8, r18	; 0x08
 6ec:	31 87       	std	Z+9, r19	; 0x09
 6ee:	87 83       	std	Z+7, r24	; 0x07
 6f0:	2f b7       	in	r18, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <USART_Driver_Init+0x54>
 6f8:	82 e3       	ldi	r24, 0x32	; 50
 6fa:	99 e2       	ldi	r25, 0x29	; 41
 6fc:	80 93 31 2a 	sts	0x2A31, r24	; 0x802a31 <RingBuffer_MIDI+0xff>
 700:	90 93 32 2a 	sts	0x2A32, r25	; 0x802a32 <RingBuffer_MIDI+0x100>
 704:	80 93 33 2a 	sts	0x2A33, r24	; 0x802a33 <RingBuffer_MIDI+0x101>
 708:	90 93 34 2a 	sts	0x2A34, r25	; 0x802a34 <RingBuffer_MIDI+0x102>
 70c:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <RingBuffer_MIDI+0x103>
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	81 11       	cpse	r24, r1
 714:	f1 cf       	rjmp	.-30     	; 0x6f8 <USART_Driver_Init+0x3a>
 716:	2f bf       	out	0x3f, r18	; 63
 718:	2f b7       	in	r18, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0d c0       	rjmp	.+26     	; 0x73a <USART_Driver_Init+0x7c>
 720:	8e e2       	ldi	r24, 0x2E	; 46
 722:	98 e2       	ldi	r25, 0x28	; 40
 724:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <RingBuffer_DEBUG+0xff>
 728:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <RingBuffer_DEBUG+0x100>
 72c:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <RingBuffer_DEBUG+0x101>
 730:	90 93 30 29 	sts	0x2930, r25	; 0x802930 <RingBuffer_DEBUG+0x102>
 734:	10 92 31 29 	sts	0x2931, r1	; 0x802931 <RingBuffer_DEBUG+0x103>
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	81 11       	cpse	r24, r1
 73c:	f1 cf       	rjmp	.-30     	; 0x720 <USART_Driver_Init+0x62>
 73e:	2f bf       	out	0x3f, r18	; 63
 740:	08 95       	ret

00000742 <USART_Driver_Begin>:
 742:	81 11       	cpse	r24, r1
 744:	07 c0       	rjmp	.+14     	; 0x754 <USART_Driver_Begin+0x12>
 746:	e0 e4       	ldi	r30, 0x40	; 64
 748:	f8 e0       	ldi	r31, 0x08	; 8
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	86 83       	std	Z+6, r24	; 0x06
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	85 83       	std	Z+5, r24	; 0x05
 752:	08 95       	ret
 754:	e0 e0       	ldi	r30, 0x00	; 0
 756:	f8 e0       	ldi	r31, 0x08	; 8
 758:	80 ec       	ldi	r24, 0xC0	; 192
 75a:	86 83       	std	Z+6, r24	; 0x06
 75c:	80 e8       	ldi	r24, 0x80	; 128
 75e:	85 83       	std	Z+5, r24	; 0x05
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	98 e2       	ldi	r25, 0x28	; 40
 764:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <__iob+0x2>
 768:	90 93 39 2a 	sts	0x2A39, r25	; 0x802a39 <__iob+0x3>
 76c:	08 95       	ret

0000076e <USART_Driver_Putc>:
	}	
}

/*USART1文字送信*/
void USART_Driver_Putc(enum Usart_Sel_e dev,const char src){
	switch(dev){
 76e:	88 23       	and	r24, r24
 770:	19 f0       	breq	.+6      	; 0x778 <USART_Driver_Putc+0xa>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	39 f0       	breq	.+14     	; 0x784 <USART_Driver_Putc+0x16>
 776:	08 95       	ret
		case USART_MIDI:
			while(!(USART2.STATUS & USART_DREIF_bm));
 778:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
 77c:	85 ff       	sbrs	r24, 5
 77e:	fc cf       	rjmp	.-8      	; 0x778 <USART_Driver_Putc+0xa>
			USART2.TXDATAL = src;
 780:	60 93 42 08 	sts	0x0842, r22	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f4842>
		case USART_DEBUG:
			while(!(USART0.STATUS & USART_DREIF_bm));
 784:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
 788:	85 ff       	sbrs	r24, 5
 78a:	fc cf       	rjmp	.-8      	; 0x784 <USART_Driver_Putc+0x16>
			USART0.TXDATAL = src;
 78c:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
 790:	08 95       	ret

00000792 <printf_wrapper>:
	
	return;
}

/*printf用ラッパ*/
int printf_wrapper(char c,FILE *stream){
 792:	cf 93       	push	r28
 794:	c8 2f       	mov	r28, r24
	if(c == '\n')printf_wrapper('\r',stream);
 796:	8a 30       	cpi	r24, 0x0A	; 10
 798:	19 f4       	brne	.+6      	; 0x7a0 <printf_wrapper+0xe>
 79a:	8d e0       	ldi	r24, 0x0D	; 13
 79c:	0e 94 c9 03 	call	0x792	; 0x792 <printf_wrapper>
	USART_Driver_Putc(USART_DEBUG,c);
 7a0:	6c 2f       	mov	r22, r28
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_Driver_Putc>
	return 0;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <__tablejump2__>:
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	05 90       	lpm	r0, Z+
 7b6:	f4 91       	lpm	r31, Z
 7b8:	e0 2d       	mov	r30, r0
 7ba:	09 94       	ijmp

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
